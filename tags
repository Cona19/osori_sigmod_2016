!_TAG_FILE_FORMAT	2	/extended format; --format=1 will not append ;" to lines/
!_TAG_FILE_SORTED	1	/0=unsorted, 1=sorted, 2=foldcase/
!_TAG_PROGRAM_AUTHOR	Darren Hiebert	/dhiebert@users.sourceforge.net/
!_TAG_PROGRAM_NAME	Exuberant Ctags	//
!_TAG_PROGRAM_URL	http://ctags.sourceforge.net	/official site/
!_TAG_PROGRAM_VERSION	5.9~svn20110310	//
BIN	Makefile	/^BIN = .\/bin\/$/;"	m
CC	Makefile	/^CC = g++$/;"	m
CPPFLAGS	Makefile	/^CPPFLAGS = -g -Wall -O3$/;"	m
EndNode	include/mvgraph.h	/^} EndNode;$/;"	t	typeref:struct:_Edge
HASH_MAX	include/mvgraph.h	19;"	d
HASH_NODE	include/mvgraph.h	20;"	d
INCLUDE	Makefile	/^INCLUDE = .\/include$/;"	m
MVGraph	include/mvgraph.h	/^	MVGraph();$/;"	p	class:MVGraph	access:public	signature:()
MVGraph	include/mvgraph.h	/^class MVGraph$/;"	c
MVGraph	src/mvgraph.cpp	/^MVGraph::MVGraph()$/;"	f	class:MVGraph	signature:()
MVGraph::MVGraph	include/mvgraph.h	/^	MVGraph();$/;"	p	class:MVGraph	access:public	signature:()
MVGraph::MVGraph	src/mvgraph.cpp	/^MVGraph::MVGraph()$/;"	f	class:MVGraph	signature:()
MVGraph::addEdge	include/mvgraph.h	/^	void addEdge(const unsigned int s,$/;"	p	class:MVGraph	access:public	signature:(const unsigned int s, const unsigned int e, const int version)
MVGraph::addEdge	src/mvgraph.cpp	/^void MVGraph::addEdge(const unsigned int s,$/;"	f	class:MVGraph	signature:(const unsigned int s, const unsigned int e, const int version)
MVGraph::findSPP	include/mvgraph.h	/^	int	 findSPP(const unsigned int s,$/;"	p	class:MVGraph	access:public	signature:(const unsigned int s, const unsigned int e, const int version, const long tid)
MVGraph::findSPP	src/mvgraph.cpp	/^int MVGraph::findSPP(const unsigned int s,$/;"	f	class:MVGraph	signature:(const unsigned int s, const unsigned int e, const int version, const long tid)
MVGraph::nodes_	include/mvgraph.h	/^	Node*	nodes_[HASH_MAX];$/;"	m	class:MVGraph	access:private
MVGraph::removeEdge	include/mvgraph.h	/^	void removeEdge(const unsigned int s,$/;"	p	class:MVGraph	access:public	signature:(const unsigned int s, const unsigned int e, const int version)
MVGraph::removeEdge	src/mvgraph.cpp	/^void MVGraph::removeEdge(const unsigned int s,$/;"	f	class:MVGraph	signature:(const unsigned int s, const unsigned int e, const int version)
MVGraph::~MVGraph	include/mvgraph.h	/^	~MVGraph();$/;"	p	class:MVGraph	access:public	signature:()
MVGraph::~MVGraph	src/mvgraph.cpp	/^MVGraph::~MVGraph()$/;"	f	class:MVGraph	signature:()
NUM_THREAD	include/mvgraph.h	22;"	d
OBJS	Makefile	/^OBJS = .\/src\/main.o .\/src\/mvgraph.o$/;"	m
SRCS	Makefile	/^SRCS = .\/src\/$(OBJS:.o=.cpp)$/;"	m
StartNode	include/mvgraph.h	/^} StartNode;$/;"	t	typeref:struct:_Node
_Edge	include/mvgraph.h	/^typedef struct _Edge$/;"	s
_Edge::destNodeNum_	include/mvgraph.h	/^	unsigned int	destNodeNum_;	\/\/ destination node number$/;"	m	struct:_Edge	access:public
_Edge::destNode_	include/mvgraph.h	/^	struct _Node*	destNode_;		\/\/ destination node of this edge$/;"	m	struct:_Edge	typeref:struct:_Edge::_Node	access:public
_Edge::next_	include/mvgraph.h	/^	_Edge*			next_;			\/\/ next edge with same starting node$/;"	m	struct:_Edge	access:public
_Edge::version_	include/mvgraph.h	/^	int				version_;		\/\/ transaction number which made this$/;"	m	struct:_Edge	access:public
_Node	include/mvgraph.h	/^typedef struct _Node$/;"	s
_Node::bfsFlag_	include/mvgraph.h	/^	unsigned int	bfsFlag_[NUM_THREAD];$/;"	m	struct:_Node	access:public
_Node::edge_	include/mvgraph.h	/^	_Edge*			edge_;			\/\/ directed edge to other node(list)$/;"	m	struct:_Node	access:public
_Node::next_	include/mvgraph.h	/^	_Node*			next_;			\/\/ next node in same hash bucket$/;"	m	struct:_Node	access:public
_Node::nodeNum_	include/mvgraph.h	/^	unsigned int	nodeNum_;		\/\/ node number$/;"	m	struct:_Node	access:public
_Node::refCount_	include/mvgraph.h	/^	unsigned int	refCount_;		\/\/ number of nodes indicating this$/;"	m	struct:_Node	access:public
__GRAPH_H__	include/mvgraph.h	10;"	d
addEdge	include/mvgraph.h	/^	void addEdge(const unsigned int s,$/;"	p	class:MVGraph	access:public	signature:(const unsigned int s, const unsigned int e, const int version)
addEdge	src/mvgraph.cpp	/^void MVGraph::addEdge(const unsigned int s,$/;"	f	class:MVGraph	signature:(const unsigned int s, const unsigned int e, const int version)
bfsFlag_	include/mvgraph.h	/^	unsigned int	bfsFlag_[NUM_THREAD];$/;"	m	struct:_Node	access:public
destNodeNum_	include/mvgraph.h	/^	unsigned int	destNodeNum_;	\/\/ destination node number$/;"	m	struct:_Edge	access:public
destNode_	include/mvgraph.h	/^	struct _Node*	destNode_;		\/\/ destination node of this edge$/;"	m	struct:_Edge	typeref:struct:_Edge::_Node	access:public
edge_	include/mvgraph.h	/^	_Edge*			edge_;			\/\/ directed edge to other node(list)$/;"	m	struct:_Node	access:public
findSPP	include/mvgraph.h	/^	int	 findSPP(const unsigned int s,$/;"	p	class:MVGraph	access:public	signature:(const unsigned int s, const unsigned int e, const int version, const long tid)
findSPP	src/mvgraph.cpp	/^int MVGraph::findSPP(const unsigned int s,$/;"	f	class:MVGraph	signature:(const unsigned int s, const unsigned int e, const int version, const long tid)
main	src/main.cpp	/^int main()$/;"	f	signature:()
main	test/hstest.cpp	/^int main()$/;"	f	signature:()
next_	include/mvgraph.h	/^	_Edge*			next_;			\/\/ next edge with same starting node$/;"	m	struct:_Edge	access:public
next_	include/mvgraph.h	/^	_Node*			next_;			\/\/ next node in same hash bucket$/;"	m	struct:_Node	access:public
nodeNum_	include/mvgraph.h	/^	unsigned int	nodeNum_;		\/\/ node number$/;"	m	struct:_Node	access:public
nodes_	include/mvgraph.h	/^	Node*	nodes_[HASH_MAX];$/;"	m	class:MVGraph	access:private
refCount_	include/mvgraph.h	/^	unsigned int	refCount_;		\/\/ number of nodes indicating this$/;"	m	struct:_Node	access:public
removeEdge	include/mvgraph.h	/^	void removeEdge(const unsigned int s,$/;"	p	class:MVGraph	access:public	signature:(const unsigned int s, const unsigned int e, const int version)
removeEdge	src/mvgraph.cpp	/^void MVGraph::removeEdge(const unsigned int s,$/;"	f	class:MVGraph	signature:(const unsigned int s, const unsigned int e, const int version)
version_	include/mvgraph.h	/^	int				version_;		\/\/ transaction number which made this$/;"	m	struct:_Edge	access:public
~MVGraph	include/mvgraph.h	/^	~MVGraph();$/;"	p	class:MVGraph	access:public	signature:()
~MVGraph	src/mvgraph.cpp	/^MVGraph::~MVGraph()$/;"	f	class:MVGraph	signature:()
